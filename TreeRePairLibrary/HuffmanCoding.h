/*
 * TreeRePair is an implementation of the Re-pair for Trees algorithm.
 *
 * Copyright (C) 2010  Roy Mennicke
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License Version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License Version 3 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not,
 * see <http://www.gnu.org/licenses/gpl-3.0.txt>.
 */
#pragma once

#include "Huffman.h"
#include "BitWriter.h"
#include "HuffmanTreeNode.h"
#include "TreeRePairTypes.h"

#include <fstream>
#include <string>

using namespace std;

/**
 * This class implements a Huffman coding which directly supports the
 * output of the Huffman codes into a binary file.
 */
class HuffmanCoding : public Huffman
{
public:
	/**
	 * The constructor of the class.
	 * @param bitWriter the bit writer used to write the Huffman codes to the
	 *  output file
	 * @param fout the output stream used by the bit writer
	 * @param unencoded if true, then the symbols are directly written to the
	 *  output file using the output stream (instead of their Huffman codes);
	 *  this option is for debugging purposes only
	 */
	HuffmanCoding(BitWriter & bitWriter, ofstream & fout, bool unencoded);
	~HuffmanCoding();

	/**
	 * Computes the Huffman tree with based on the number of occurrences of
	 * each symbol of the input message. The number of occurrences are counted
	 * using the method HuffmanCoding::countSymbol().
	 */
	void computeHuffmanTree();

	/**
	 * Updates the number of occurrences counter for the given symbol.
	 * @param symbol the input symbol whose number of occurrences counter
	 *  shall be updated
	 * @param add the amount to add to the number of occurrences counter
	 *  (default is 1)
	 */
	void countSymbol(const unsigned int symbol, const unsigned int add = 1);

	/**
	 * Writes the Huffman code of the specified symbol to the output file.
	 * @param symbol the symbol whose Huffman code shall be written to the
	 *  output file
	 * @param isSymbol indicates wheter the integer of the first argument
	 *  is an valid ID of an instance of the Symbol class (this parameter
	 *  is only evaluated when debugging the output of the implementation)
	 */
	void writeHuffmanCode(const int symbol, bool isSymbol = false);

	/**
	 * Write an enumeration of the code lengths to the output file. With
	 * this information the Huffman tree can be reconstructed at any time.
	 * However, it is required to call HuffmanCoding::reorganizeHuffmanCodes()
	 * before.
	 * @param pHuffmanCoding an optional Huffman coding which is used to
	 *  encode the enumeration of code lengths; if null, then a fixed-length
	 *  coding is used
	 */
	void writeHuffmanTree(HuffmanCoding * pHuffmanCoding = 0);

	/**
	 * Reorganizes the Huffman codes of this Huffman coding (without reducing
	 * the compression performance of the coding) in order to be able to
	 * represent the Huffman tree by an enumeration of its code lengths
	 * (see page 7 in DEFLATE specification).
	 */
	void reorganizeHuffmanCodes();

	/**
	 * Returns a hash map allowing constant time access to the Huffman code
	 * of a input symbol.
	 */
	HASH_S_H * getHuffmanTreeNodes() {
		return pHashedHuffmanTreeNodes;
	};

	/**
	 * Returns the biggest symbol (the symbols are integers) encoded by this
	 * Huffman coding.
	 */
	unsigned int getBiggestDecimal() {
		return biggestDecimal;
	};

	/**
	 * Returns the length of the longest Huffman code of this Huffman coding.
	 */
	unsigned int getMaximumCodeLength();

private:
	/**
	 * Returns true if and only if the input symbol represented by the first
	 * node occurs less often than the input symbol represented by the second
	 * Huffman tree node. This method is used to sort the Huffman tree nodes.
	 */
	static bool cmpHuffmanTreeNodes(HuffmanTreeNode * pNode1,
				HuffmanTreeNode * pNode2);

	/**
	 * Adds a Huffman tree node for the specified input symbol.
	 */
	HuffmanTreeNode * addHuffmanTreeNode(const unsigned int symbol);

	/**
	 * Recursively computes the Huffman codes for the input symbols. This
	 * method is called after the Huffman tree has been generated by the
	 * HuffmanCoding::computeHuffmanTree() method.
	 */
	void computeHuffmanCodes(HuffmanTreeNode * pNode,
			const string &representation);

	/**
	 * Keeps track of all Huffman tree nodes representing an input symbol.
	 */
	vector<HuffmanTreeNode*> * pHuffmanTreeNodesVector;

	/**
	 * The bit writer to use to write out the Huffman codes.
	 */
	BitWriter & bitWriter;

	/**
	 * The output stream used by the bit writer.
	 */
	ofstream & fout;

	/**
	 * If true, then the symbols are directly written to the
	 * output file using the output stream (instead of their Huffman codes).
	 * This option is for debugging purposes only.
	 */
	bool unencoded;

	/**
	 * The biggest input symbol (the symbols are integers) encoded by this
	 * Huffman coding.
	 */
	unsigned int biggestDecimal;
};
